import { CreateMetadataParameters, Uploader, UploadResult, ValidMetadataURI } from "./types";
type Metadata = {
    name: string;
    symbol: string;
    description: string;
    image: string;
    properties?: Record<string, string>;
    animation_url?: string;
    content?: {
        uri: string;
        mime: string | undefined;
    };
};
export declare function validateImageMimeType(mimeType: string): void;
export declare function getURLFromUploadResult(uploadResult: UploadResult): import("url").URL;
export declare class CoinMetadataBuilder {
    private name;
    private description;
    private symbol;
    private imageFile;
    private imageURL;
    private mediaFile;
    private mediaURL;
    private mediaMimeType;
    private properties;
    withName(name: string): this;
    withSymbol(symbol: string): this;
    withDescription(description: string): this;
    withImage(image: File): this;
    withImageURI(imageURI: string): this;
    withProperties(properties: Record<string, string>): this;
    withMedia(media: File): this;
    withMediaURI(mediaURI: string, mediaMimeType: string | undefined): this;
    validate(): this;
    generateMetadata(): Metadata;
    upload(uploader: Uploader): Promise<{
        url: ValidMetadataURI;
        createMetadataParameters: CreateMetadataParameters;
        metadata: Metadata;
    }>;
}
export declare function createMetadataBuilder(): CoinMetadataBuilder;
export {};
//# sourceMappingURL=metadata.d.ts.map