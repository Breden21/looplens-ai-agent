import type { Options as ClientOptions, TDataShape, Client } from "@hey-api/client-fetch";
import type { GetApiKeyData, GetCoinData, GetCoinCommentsData, GetCoinHoldersData, GetCoinSwapsData, GetCoinsData, SetCreateUploadJwtData, GetExploreData, GetProfileData, GetProfileBalancesData, GetProfileCoinsData, PostQuoteData } from "./types.gen";
export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};
/**
 * zoraSDK_apiKey query
 */
export declare const getApiKey: <ThrowOnError extends boolean = false>(options: Options<GetApiKeyData, ThrowOnError>) => import("@hey-api/client-fetch").RequestResult<{
    apiKey: {
        apiKey: string;
        isActive: boolean;
    };
}, unknown, ThrowOnError>;
/**
 * zoraSDK_coin query
 */
export declare const getCoin: <ThrowOnError extends boolean = false>(options: Options<GetCoinData, ThrowOnError>) => import("@hey-api/client-fetch").RequestResult<{
    zora20Token?: {
        id: string;
        name: string;
        description: string;
        address: string;
        symbol: string;
        totalSupply: string;
        totalVolume: string;
        volume24h: string;
        createdAt?: string;
        creatorAddress?: string;
        poolCurrencyToken?: {
            address?: string;
            name?: string;
            decimals?: number;
        };
        tokenPrice?: {
            priceInUsdc?: string;
            currencyAddress: string;
            priceInPoolToken: string;
        };
        marketCap: string;
        marketCapDelta24h: string;
        chainId: number;
        tokenUri?: string;
        platformReferrerAddress?: string;
        payoutRecipientAddress?: string;
        creatorProfile?: {
            id: string;
            handle: string;
            avatar?: {
                previewImage: {
                    blurhash?: string;
                    medium: string;
                    small: string;
                };
            };
        };
        mediaContent?: {
            mimeType?: string;
            originalUri: string;
            previewImage?: {
                small: string;
                medium: string;
                blurhash?: string;
            };
        };
        uniqueHolders: number;
        uniswapV4PoolKey: {
            token0Address: string;
            token1Address: string;
            fee: number;
            tickSpacing: number;
            hookAddress: string;
        };
        uniswapV3PoolAddress: string;
        zoraComments: {
            pageInfo: {
                endCursor?: string;
                hasNextPage: boolean;
            };
            count: number;
            edges: Array<{
                node: {
                    commentId: string;
                    nonce: string;
                    userAddress: string;
                    txHash: string;
                    comment: string;
                    timestamp: number;
                    userProfile?: {
                        id: string;
                        handle: string;
                        avatar?: {
                            previewImage: {
                                blurhash?: string;
                                small: string;
                                medium: string;
                            };
                        };
                    };
                };
            }>;
        };
        creatorEarnings?: Array<{
            amount: {
                currencyAddress: string;
                amountRaw: string;
                amountDecimal: number;
            };
            amountUsd?: string;
        }>;
    };
}, unknown, ThrowOnError>;
/**
 * zoraSDK_coinComments query
 */
export declare const getCoinComments: <ThrowOnError extends boolean = false>(options: Options<GetCoinCommentsData, ThrowOnError>) => import("@hey-api/client-fetch").RequestResult<{
    zora20Token?: {
        zoraComments: {
            pageInfo: {
                endCursor?: string;
                hasNextPage: boolean;
            };
            count: number;
            edges: Array<{
                node: {
                    commentId: string;
                    nonce: string;
                    userAddress: string;
                    txHash: string;
                    comment: string;
                    timestamp: number;
                    userProfile?: {
                        id: string;
                        handle: string;
                        avatar?: {
                            previewImage: {
                                blurhash?: string;
                                small: string;
                                medium: string;
                            };
                        };
                    };
                    replies: {
                        count: number;
                        edges: Array<{
                            node: {
                                commentId: string;
                                nonce: string;
                                userAddress: string;
                                txHash: string;
                                comment: string;
                                timestamp: number;
                                userProfile?: {
                                    id: string;
                                    handle: string;
                                    avatar?: {
                                        previewImage: {
                                            blurhash?: string;
                                            small: string;
                                            medium: string;
                                        };
                                    };
                                };
                            };
                        }>;
                    };
                };
            }>;
        };
    };
}, unknown, ThrowOnError>;
/**
 * zoraSDK_coinHolders query
 */
export declare const getCoinHolders: <ThrowOnError extends boolean = false>(options: Options<GetCoinHoldersData, ThrowOnError>) => import("@hey-api/client-fetch").RequestResult<{
    zora20Token?: {
        tokenBalances: {
            pageInfo: {
                endCursor?: string;
                hasNextPage: boolean;
            };
            count: number;
            edges: Array<{
                node: {
                    balance: string;
                    ownerAddress: string;
                    ownerProfile: {
                        id: string;
                        handle: string;
                        avatar?: {
                            previewImage: {
                                blurhash?: string;
                                medium: string;
                                small: string;
                            };
                        };
                    };
                };
            }>;
        };
    };
}, unknown, ThrowOnError>;
/**
 * zoraSDK_coinSwaps query
 */
export declare const getCoinSwaps: <ThrowOnError extends boolean = false>(options: Options<GetCoinSwapsData, ThrowOnError>) => import("@hey-api/client-fetch").RequestResult<{
    zora20Token?: {
        swapActivities: {
            count: number;
            edges: Array<{
                node: {
                    id: string;
                    currencyAmountWithPrice: {
                        priceUsdc?: string;
                        currencyAmount: {
                            currencyAddress: string;
                            amountDecimal: number;
                        };
                    };
                    senderAddress: string;
                    recipientAddress: string;
                    transactionHash: string;
                    coinAmount: string;
                    blockTimestamp: string;
                    activityType?: "BUY" | "SELL";
                    senderProfile?: {
                        id: string;
                        handle: string;
                        avatar?: {
                            previewImage: {
                                blurhash?: string;
                                medium: string;
                                small: string;
                            };
                        };
                    };
                };
                cursor: string;
            }>;
            pageInfo: {
                endCursor?: string;
                hasNextPage: boolean;
            };
        };
    };
}, unknown, ThrowOnError>;
/**
 * zoraSDK_coins query
 */
export declare const getCoins: <ThrowOnError extends boolean = false>(options: Options<GetCoinsData, ThrowOnError>) => import("@hey-api/client-fetch").RequestResult<{
    zora20Tokens: Array<{
        id: string;
        name: string;
        description: string;
        address: string;
        symbol: string;
        totalSupply: string;
        totalVolume: string;
        volume24h: string;
        createdAt?: string;
        creatorAddress?: string;
        poolCurrencyToken?: {
            address?: string;
            name?: string;
            decimals?: number;
        };
        tokenPrice?: {
            priceInUsdc?: string;
            currencyAddress: string;
            priceInPoolToken: string;
        };
        marketCap: string;
        marketCapDelta24h: string;
        chainId: number;
        tokenUri?: string;
        platformReferrerAddress?: string;
        payoutRecipientAddress?: string;
        creatorProfile?: {
            id: string;
            handle: string;
            avatar?: {
                previewImage: {
                    blurhash?: string;
                    medium: string;
                    small: string;
                };
            };
        };
        mediaContent?: {
            mimeType?: string;
            originalUri: string;
            previewImage?: {
                small: string;
                medium: string;
                blurhash?: string;
            };
        };
        uniqueHolders: number;
        uniswapV4PoolKey: {
            token0Address: string;
            token1Address: string;
            fee: number;
            tickSpacing: number;
            hookAddress: string;
        };
        uniswapV3PoolAddress: string;
        zoraComments: {
            pageInfo: {
                endCursor?: string;
                hasNextPage: boolean;
            };
            count: number;
            edges: Array<{
                node: {
                    commentId: string;
                    nonce: string;
                    userAddress: string;
                    txHash: string;
                    comment: string;
                    timestamp: number;
                    userProfile?: {
                        id: string;
                        handle: string;
                        avatar?: {
                            previewImage: {
                                blurhash?: string;
                                small: string;
                                medium: string;
                            };
                        };
                    };
                };
            }>;
        };
        creatorEarnings?: Array<{
            amount: {
                currencyAddress: string;
                amountRaw: string;
                amountDecimal: number;
            };
            amountUsd?: string;
        }>;
    }>;
}, unknown, ThrowOnError>;
/**
 * zoraSDK_createUploadJWT mutation
 */
export declare const setCreateUploadJwt: <ThrowOnError extends boolean = false>(options?: Options<SetCreateUploadJwtData, ThrowOnError>) => import("@hey-api/client-fetch").RequestResult<{
    createUploadJwtFromApiKey: string;
}, unknown, ThrowOnError>;
/**
 * zoraSDK_explore query
 */
export declare const getExplore: <ThrowOnError extends boolean = false>(options: Options<GetExploreData, ThrowOnError>) => import("@hey-api/client-fetch").RequestResult<{
    exploreList: {
        edges: Array<{
            node: {
                id: string;
                name: string;
                description: string;
                address: string;
                symbol: string;
                totalSupply: string;
                totalVolume: string;
                volume24h: string;
                createdAt?: string;
                creatorAddress?: string;
                poolCurrencyToken?: {
                    address?: string;
                    name?: string;
                    decimals?: number;
                };
                tokenPrice?: {
                    priceInUsdc?: string;
                    currencyAddress: string;
                    priceInPoolToken: string;
                };
                marketCap: string;
                marketCapDelta24h: string;
                chainId: number;
                tokenUri?: string;
                platformReferrerAddress?: string;
                payoutRecipientAddress?: string;
                creatorProfile?: {
                    id: string;
                    handle: string;
                    avatar?: {
                        previewImage: {
                            blurhash?: string;
                            medium: string;
                            small: string;
                        };
                    };
                };
                mediaContent?: {
                    mimeType?: string;
                    originalUri: string;
                    previewImage?: {
                        small: string;
                        medium: string;
                        blurhash?: string;
                    };
                };
                uniqueHolders: number;
                uniswapV4PoolKey: {
                    token0Address: string;
                    token1Address: string;
                    fee: number;
                    tickSpacing: number;
                    hookAddress: string;
                };
                uniswapV3PoolAddress: string;
            };
            cursor: string;
        }>;
        pageInfo: {
            endCursor?: string;
            hasNextPage: boolean;
        };
    };
}, unknown, ThrowOnError>;
/**
 * zoraSDK_profile query
 */
export declare const getProfile: <ThrowOnError extends boolean = false>(options: Options<GetProfileData, ThrowOnError>) => import("@hey-api/client-fetch").RequestResult<{
    profile?: {
        id: string;
        handle: string;
        avatar?: {
            small: string;
            medium: string;
            blurhash?: string;
        };
        username: string;
        displayName?: string;
        bio: string;
        website?: string;
        publicWallet: {
            walletAddress: string;
        };
        socialAccounts: {
            instagram?: {
                username?: string;
                displayName?: string;
            };
            tiktok?: {
                username?: string;
                displayName?: string;
            };
            twitter?: {
                username?: string;
                displayName?: string;
            };
            farcaster?: {
                username?: string;
                displayName?: string;
            };
        };
        linkedWallets: {
            edges: Array<{
                node: {
                    walletType: "PRIVY" | "EXTERNAL" | "SMART_WALLET";
                    walletAddress: string;
                };
            }>;
        };
        creatorCoin?: {
            address: string;
            marketCap: string;
            marketCapDelta24h: string;
        };
    };
}, unknown, ThrowOnError>;
/**
 * zoraSDK_profileBalances query
 */
export declare const getProfileBalances: <ThrowOnError extends boolean = false>(options: Options<GetProfileBalancesData, ThrowOnError>) => import("@hey-api/client-fetch").RequestResult<{
    profile?: {
        id: string;
        handle: string;
        avatar?: {
            previewImage: {
                blurhash?: string;
                medium: string;
                small: string;
            };
        };
        coinBalances: {
            count: number;
            edges: Array<{
                node: {
                    balance: string;
                    id: string;
                    coin?: {
                        id: string;
                        name: string;
                        description: string;
                        address: string;
                        symbol: string;
                        totalSupply: string;
                        totalVolume: string;
                        volume24h: string;
                        createdAt?: string;
                        creatorAddress?: string;
                        poolCurrencyToken?: {
                            address?: string;
                            name?: string;
                            decimals?: number;
                        };
                        tokenPrice?: {
                            priceInUsdc?: string;
                            currencyAddress: string;
                            priceInPoolToken: string;
                        };
                        marketCap: string;
                        marketCapDelta24h: string;
                        chainId: number;
                        tokenUri?: string;
                        platformReferrerAddress?: string;
                        payoutRecipientAddress?: string;
                        creatorProfile?: {
                            id: string;
                            handle: string;
                            avatar?: {
                                previewImage: {
                                    blurhash?: string;
                                    medium: string;
                                    small: string;
                                };
                            };
                        };
                        mediaContent?: {
                            mimeType?: string;
                            originalUri: string;
                            previewImage?: {
                                small: string;
                                medium: string;
                                blurhash?: string;
                            };
                        };
                        uniqueHolders: number;
                        uniswapV4PoolKey: {
                            token0Address: string;
                            token1Address: string;
                            fee: number;
                            tickSpacing: number;
                            hookAddress: string;
                        };
                        uniswapV3PoolAddress: string;
                    };
                };
            }>;
            pageInfo: {
                hasNextPage: boolean;
                endCursor?: string;
            };
        };
    };
}, unknown, ThrowOnError>;
/**
 * zoraSDK_profileCoins query
 */
export declare const getProfileCoins: <ThrowOnError extends boolean = false>(options: Options<GetProfileCoinsData, ThrowOnError>) => import("@hey-api/client-fetch").RequestResult<{
    profile?: {
        id: string;
        handle: string;
        avatar?: {
            previewImage: {
                blurhash?: string;
                medium: string;
                small: string;
            };
        };
        createdCoins?: {
            count: number;
            edges: Array<{
                node: {
                    id: string;
                    name: string;
                    description: string;
                    address: string;
                    symbol: string;
                    totalSupply: string;
                    totalVolume: string;
                    volume24h: string;
                    createdAt?: string;
                    creatorAddress?: string;
                    poolCurrencyToken?: {
                        address?: string;
                        name?: string;
                        decimals?: number;
                    };
                    tokenPrice?: {
                        priceInUsdc?: string;
                        currencyAddress: string;
                        priceInPoolToken: string;
                    };
                    marketCap: string;
                    marketCapDelta24h: string;
                    chainId: number;
                    tokenUri?: string;
                    platformReferrerAddress?: string;
                    payoutRecipientAddress?: string;
                    creatorProfile?: {
                        id: string;
                        handle: string;
                        avatar?: {
                            previewImage: {
                                blurhash?: string;
                                medium: string;
                                small: string;
                            };
                        };
                    };
                    mediaContent?: {
                        mimeType?: string;
                        originalUri: string;
                        previewImage?: {
                            small: string;
                            medium: string;
                            blurhash?: string;
                        };
                    };
                    uniqueHolders: number;
                    uniswapV4PoolKey: {
                        token0Address: string;
                        token1Address: string;
                        fee: number;
                        tickSpacing: number;
                        hookAddress: string;
                    };
                    uniswapV3PoolAddress: string;
                    zoraComments: {
                        pageInfo: {
                            endCursor?: string;
                            hasNextPage: boolean;
                        };
                        count: number;
                        edges: Array<{
                            node: {
                                commentId: string;
                                nonce: string;
                                userAddress: string;
                                txHash: string;
                                comment: string;
                                timestamp: number;
                                userProfile?: {
                                    id: string;
                                    handle: string;
                                    avatar?: {
                                        previewImage: {
                                            blurhash?: string;
                                            small: string;
                                            medium: string;
                                        };
                                    };
                                };
                            };
                        }>;
                    };
                };
            }>;
            pageInfo: {
                hasNextPage: boolean;
                endCursor?: string;
            };
        };
    };
}, unknown, ThrowOnError>;
export declare const postQuote: <ThrowOnError extends boolean = false>(options?: Options<PostQuoteData, ThrowOnError>) => import("@hey-api/client-fetch").RequestResult<{
    success: boolean;
    call: {
        data: string;
        value: string;
        target: string;
    };
    permits?: Array<{
        signature: string;
        permit: {
            sigDeadline: string;
            spender: string;
            details: {
                token: string;
                amount: string;
                expiration: number;
                nonce: number;
            };
        };
    }>;
    trade?: {
        commands: Array<string>;
        value: string;
        inputs: Array<string>;
    };
    quote: {
        amountOut: string;
        slippage: number;
        tokenIn?: {
            type?: string;
            address?: string;
        };
    };
}, {
    error?: string;
}, ThrowOnError>;
//# sourceMappingURL=sdk.gen.d.ts.map