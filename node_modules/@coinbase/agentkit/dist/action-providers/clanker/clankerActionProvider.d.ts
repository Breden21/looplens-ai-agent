import { z } from "zod";
import { ActionProvider } from "../actionProvider";
import { Network } from "../../network";
import { EvmWalletProvider } from "../../wallet-providers";
import { ClankTokenSchema } from "./schemas";
/**
 * ClankerActionProvider provides actions for clanker operations.
 *
 * @description
 * This provider is designed to work with EvmWalletProvider for blockchain interactions.
 * It supports all evm networks.
 */
export declare class ClankerActionProvider extends ActionProvider<EvmWalletProvider> {
    /**
     * Constructor for the ClankerActionProvider.
     */
    constructor();
    /**
     * Clanker action provider
     *
     * @description
     * This action deploys a clanker token using the Clanker sdk
     * It automatically includes the coin in the Clanker ecosystem
     *
     * @param walletProvider - The wallet provider instance for blockchain interactions
     * @param args - Clanker arguments (modify these to fine tune token deployment, like initial quote token and rewards config)
     * @returns A promise that resolves to a string describing the clanker result
     */
    clankToken(walletProvider: EvmWalletProvider, args: z.infer<typeof ClankTokenSchema>): Promise<string>;
    /**
     * Checks if this provider supports the given network.
     *
     * @param network - The network to check support for
     * @returns True if the network is supported
     */
    supportsNetwork(network: Network): boolean;
}
/**
 * Factory function to create a new ClankerActionProvider instance.
 *
 * @returns A new ClankerActionProvider instance
 */
export declare const clankerActionProvider: () => ClankerActionProvider;
