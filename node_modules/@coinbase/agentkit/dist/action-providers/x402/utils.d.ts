import { Network } from "../../network";
import { AxiosError } from "axios";
import { WalletProvider } from "../../wallet-providers";
/**
 * Supported network types for x402 protocol
 */
export type X402Network = "base" | "base-sepolia" | "solana" | "solana-devnet";
/**
 * Converts the internal network ID to the format expected by the x402 protocol.
 *
 * @param network - The network to convert
 * @returns The network ID in x402 format
 * @throws Error if the network is not supported
 */
export declare function getX402Network(network: Network): X402Network | string | undefined;
/**
 * Helper method to handle HTTP errors consistently.
 *
 * @param error - The axios error to handle
 * @param url - The URL that was being accessed when the error occurred
 * @returns A JSON string containing formatted error details
 */
export declare function handleHttpError(error: AxiosError, url: string): string;
/**
 * Formats a payment option into a human-readable string.
 *
 * @param option - The payment option to format
 * @param option.asset - The asset address or identifier
 * @param option.maxAmountRequired - The maximum amount required for the payment
 * @param option.network - The network identifier
 * @param walletProvider - The wallet provider for token details lookup
 * @returns A formatted string like "0.1 USDC on base"
 */
export declare function formatPaymentOption(option: {
    asset: string;
    maxAmountRequired: string;
    network: string;
}, walletProvider: WalletProvider): Promise<string>;
/**
 * Checks if an asset is USDC on any supported network.
 *
 * @param asset - The asset address or identifier
 * @param walletProvider - The wallet provider for network context
 * @returns True if the asset is USDC, false otherwise
 */
export declare function isUsdcAsset(asset: string, walletProvider: WalletProvider): boolean;
/**
 * Converts whole units to atomic units for a given asset.
 *
 * @param wholeUnits - The amount in whole units (e.g., 0.1 for 0.1 USDC)
 * @param asset - The asset address or identifier
 * @param walletProvider - The wallet provider for token details lookup
 * @returns The amount in atomic units as a string, or null if conversion fails
 */
export declare function convertWholeUnitsToAtomic(wholeUnits: number, asset: string, walletProvider: WalletProvider): Promise<string | null>;
