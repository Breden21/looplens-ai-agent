"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DirectX402RequestSchema = exports.RetryWithX402Schema = exports.HttpRequestSchema = exports.ListX402ServicesSchema = void 0;
const zod_1 = require("zod");
// Schema for listing x402 services
exports.ListX402ServicesSchema = zod_1.z
    .object({
    maxUsdcPrice: zod_1.z
        .number()
        .optional()
        .describe("Optional maximum price in USDC whole units (e.g., 0.1 for 0.10 USDC). Only USDC payment options will be considered when this filter is applied."),
})
    .strip()
    .describe("Parameters for listing x402 services with optional filtering");
// Schema for initial HTTP request
exports.HttpRequestSchema = zod_1.z
    .object({
    url: zod_1.z
        .string()
        .url()
        .describe("The URL of the API endpoint (can be localhost for development)"),
    method: zod_1.z
        .enum(["GET", "POST", "PUT", "DELETE", "PATCH"])
        .nullable()
        .default("GET")
        .describe("The HTTP method to use for the request"),
    headers: zod_1.z
        .record(zod_1.z.string())
        .optional()
        .nullable()
        .describe("Optional headers to include in the request"),
    body: zod_1.z
        .any()
        .optional()
        .nullable()
        .describe("Optional request body for POST/PUT/PATCH requests"),
})
    .strip()
    .describe("Instructions for making a basic HTTP request");
// Schema for retrying a failed request with x402 payment
exports.RetryWithX402Schema = zod_1.z
    .object({
    url: zod_1.z
        .string()
        .url()
        .describe("The URL of the API endpoint (can be localhost for development)"),
    method: zod_1.z
        .enum(["GET", "POST", "PUT", "DELETE", "PATCH"])
        .nullable()
        .default("GET")
        .describe("The HTTP method to use for the request"),
    headers: zod_1.z.record(zod_1.z.string()).optional().describe("Optional headers to include in the request"),
    body: zod_1.z.any().optional().describe("Optional request body for POST/PUT/PATCH requests"),
    selectedPaymentOption: zod_1.z
        .object({
        scheme: zod_1.z.string(),
        network: zod_1.z.string(),
        maxAmountRequired: zod_1.z.string(),
        asset: zod_1.z.string(),
    })
        .describe("The payment option to use for this request"),
})
    .strip()
    .describe("Instructions for retrying a request with x402 payment after receiving a 402 response");
// Schema for direct x402 payment request (with warning)
exports.DirectX402RequestSchema = zod_1.z
    .object({
    url: zod_1.z
        .string()
        .url()
        .describe("The URL of the API endpoint (can be localhost for development)"),
    method: zod_1.z
        .enum(["GET", "POST", "PUT", "DELETE", "PATCH"])
        .nullable()
        .default("GET")
        .describe("The HTTP method to use for the request"),
    headers: zod_1.z
        .record(zod_1.z.string())
        .optional()
        .nullable()
        .describe("Optional headers to include in the request"),
    body: zod_1.z
        .any()
        .optional()
        .nullable()
        .describe("Optional request body for POST/PUT/PATCH requests"),
})
    .strip()
    .describe("Instructions for making an HTTP request with automatic x402 payment handling. WARNING: This bypasses user confirmation - only use when explicitly told to skip confirmation!");
