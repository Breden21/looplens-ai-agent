"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.YelayBalanceSchema = exports.YelayClaimSchema = exports.YelayRedeemSchema = exports.YelayDepositSchema = void 0;
const zod_1 = require("zod");
/**
 * Input schema for Yelay Vault deposit action.
 */
exports.YelayDepositSchema = zod_1.z
    .object({
    assets: zod_1.z
        .string()
        .regex(/^\d+(\.\d+)?$/, "Must be a valid integer or decimal value")
        .describe("The quantity of assets to deposit"),
    vaultAddress: zod_1.z
        .string()
        .regex(/^0x[a-fA-F0-9]{40}$/, "Invalid Ethereum address format")
        .describe("The vault address which will receive the shares"),
})
    .describe("Input schema for Yelay Vault deposit action");
/**
 * Input schema for Yelay Vault redeem action.
 */
exports.YelayRedeemSchema = zod_1.z
    .object({
    assets: zod_1.z
        .string()
        .regex(/^\d+(\.\d+)?$/, "Must be a valid integer or decimal value")
        .describe("The amount of assets to redeem"),
    vaultAddress: zod_1.z
        .string()
        .regex(/^0x[a-fA-F0-9]{40}$/, "Invalid Ethereum address format")
        .describe("The vault address from which will redeem the shares"),
})
    .strip()
    .describe("Input schema for Yelay Vault redeem action");
/**
 * Input schema for Yelay Vault claim action.
 */
exports.YelayClaimSchema = zod_1.z
    .object({
    vaultAddress: zod_1.z
        .string()
        .regex(/^0x[a-fA-F0-9]{40}$/, "Invalid Ethereum address format")
        .describe("The vault address from which will claim yield"),
})
    .strip()
    .describe("Input schema for Yelay Vault claim action");
/**
 * Input schema for Yelay Vault balance action.
 */
exports.YelayBalanceSchema = zod_1.z
    .object({
    vaultAddress: zod_1.z
        .string()
        .regex(/^0x[a-fA-F0-9]{40}$/, "Invalid Ethereum address format")
        .describe("The vault address where deposit was made"),
})
    .strip()
    .describe("Input schema for Yelay Vault balance action");
