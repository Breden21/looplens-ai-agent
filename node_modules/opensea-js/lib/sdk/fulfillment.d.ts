import { OrderComponents } from "@opensea/seaport-js/lib/types";
import { BigNumberish, Overrides } from "ethers";
import { SDKContext } from "./context";
import { OrdersManager } from "./orders";
import { Listing, Offer, Order } from "../api/types";
import { OrderV2 } from "../orders/types";
import { AssetWithTokenId } from "../types";
/**
 * Manager for order fulfillment and validation operations.
 * Handles fulfilling orders, validating orders onchain, and approving orders.
 */
export declare class FulfillmentManager {
    private context;
    private ordersManager;
    constructor(context: SDKContext, ordersManager: OrdersManager);
    /**
     * Fulfill a private order for a designated address.
     * @param options
     * @param options.order The order to fulfill
     * @param options.accountAddress Address of the wallet taking the order.
     * @param options.domain An optional domain to be hashed and included at the end of fulfillment calldata.
     *                       This can be used for on-chain order attribution to assist with analytics.
     * @param options.overrides Transaction overrides, ignored if not set.
     * @returns Transaction hash of the order.
     */
    private fulfillPrivateOrder;
    /**
     * Fulfill an order for an asset. The order can be either a listing or an offer.
     * @param options
     * @param options.order The order to fulfill, a.k.a. "take"
     * @param options.accountAddress Address of the wallet taking the offer.
     * @param options.recipientAddress The optional address to receive the order's item(s) or currencies. If not specified, defaults to accountAddress.
     * @param options.domain An optional domain to be hashed and included at the end of fulfillment calldata.  This can be used for on-chain order attribution to assist with analytics.
     * @param options.assetContractAddress Optional address of the NFT contract for criteria offers (e.g., collection offers). Required when fulfilling collection offers.
     * @param options.tokenId Optional token ID for criteria offers (e.g., collection offers). Required when fulfilling collection offers.
     * @param options.overrides Transaction overrides, ignored if not set.
     * @returns Transaction hash of the order.
     *
     * @throws Error if the accountAddress is not available through wallet or provider.
     * @throws Error if the order's protocol address is not supported by OpenSea. See {@link isValidProtocol}.
     * @throws Error if attempting to fulfill the order with a recipient address which does not match a private listing.
     */
    fulfillOrder({ order, accountAddress, recipientAddress, unitsToFill, domain, assetContractAddress, tokenId, overrides, }: {
        order: OrderV2 | Order | Listing | Offer;
        accountAddress: string;
        recipientAddress?: string;
        unitsToFill?: BigNumberish;
        domain?: string;
        assetContractAddress?: string;
        tokenId?: string;
        overrides?: Overrides;
    }): Promise<string>;
    /**
     * Returns whether an order is fulfillable.
     * An order may not be fulfillable if a target item's transfer function
     * is locked for some reason, e.g. an item is being rented within a game
     * or trading has been locked for an item type.
     * @param options
     * @param options.order Order to check
     * @param options.accountAddress The account address that will be fulfilling the order
     * @returns True if the order is fulfillable, else False.
     *
     * @throws Error if the order's protocol address is not supported by OpenSea. See {@link isValidProtocol}.
     */
    isOrderFulfillable({ order, accountAddress, }: {
        order: OrderV2;
        accountAddress: string;
    }): Promise<boolean>;
    /**
     * Instead of signing an off-chain order, this methods allows you to approve an order
     * with an on-chain transaction.
     * @param order Order to approve
     * @param domain An optional domain to be hashed and included at the end of fulfillment calldata.  This can be used for on-chain order attribution to assist with analytics.
     * @returns Transaction hash of the approval transaction
     *
     * @throws Error if the accountAddress is not available through wallet or provider.
     * @throws Error if the order's protocol address is not supported by OpenSea. See {@link isValidProtocol}.
     */
    approveOrder(order: OrderV2, domain?: string): Promise<string>;
    /**
     * Validates an order onchain using Seaport's validate() method. This submits the order onchain
     * and pre-validates the order using Seaport, which makes it cheaper to fulfill since a signature
     * is not needed to be verified during fulfillment for the order, but is not strictly required
     * and the alternative is orders can be submitted to the API for free instead of sent onchain.
     * @param orderComponents Order components to validate onchain
     * @param accountAddress Address of the wallet that will pay the gas to validate the order
     * @returns Transaction hash of the validation transaction
     *
     * @throws Error if the accountAddress is not available through wallet or provider.
     */
    validateOrderOnchain(orderComponents: OrderComponents, accountAddress: string): Promise<string>;
    /**
     * Create and validate a listing onchain using Seaport's validate() method. This combines
     * order building with onchain validation in a single call.
     * @param options Listing parameters
     * @returns Transaction hash of the validation transaction
     */
    createListingAndValidateOnchain({ asset, accountAddress, startAmount, endAmount, quantity, domain, salt, listingTime, expirationTime, paymentTokenAddress, buyerAddress, englishAuction, includeOptionalCreatorFees, zone, }: {
        asset: AssetWithTokenId;
        accountAddress: string;
        startAmount: BigNumberish;
        endAmount?: BigNumberish;
        quantity?: BigNumberish;
        domain?: string;
        salt?: BigNumberish;
        listingTime?: number;
        expirationTime?: number;
        paymentTokenAddress?: string;
        buyerAddress?: string;
        englishAuction?: boolean;
        includeOptionalCreatorFees?: boolean;
        zone?: string;
    }): Promise<string>;
    /**
     * Create and validate an offer onchain using Seaport's validate() method. This combines
     * order building with onchain validation in a single call.
     * @param options Offer parameters
     * @returns Transaction hash of the validation transaction
     */
    createOfferAndValidateOnchain({ asset, accountAddress, startAmount, quantity, domain, salt, expirationTime, paymentTokenAddress, zone, }: {
        asset: AssetWithTokenId;
        accountAddress: string;
        startAmount: BigNumberish;
        quantity?: BigNumberish;
        domain?: string;
        salt?: BigNumberish;
        expirationTime?: BigNumberish;
        paymentTokenAddress?: string;
        zone?: string;
    }): Promise<string>;
}
