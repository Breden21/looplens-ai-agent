import { GetOrdersResponse, CancelOrderResponse } from "./types";
import { FulfillmentDataResponse, OrderAPIOptions, OrdersQueryOptions, OrderV2, ProtocolData } from "../orders/types";
import { Chain, OrderSide } from "../types";
/**
 * Order-related API operations
 */
export declare class OrdersAPI {
    private get;
    private post;
    private chain;
    constructor(get: <T>(apiPath: string, query?: object) => Promise<T>, post: <T>(apiPath: string, body?: object, opts?: object) => Promise<T>, chain: Chain);
    /**
     * Gets an order from API based on query options.
     */
    getOrder({ side, protocol, orderDirection, orderBy, ...restOptions }: Omit<OrdersQueryOptions, "limit">): Promise<OrderV2>;
    /**
     * Gets a single order by its order hash.
     */
    getOrderByHash(orderHash: string, protocolAddress: string, chain?: Chain): Promise<OrderV2>;
    /**
     * Gets a list of orders from API based on query options.
     */
    getOrders({ side, protocol, orderDirection, orderBy, pageSize, ...restOptions }: Omit<OrdersQueryOptions, "limit"> & {
        pageSize?: number;
    }): Promise<GetOrdersResponse>;
    /**
     * Generate the data needed to fulfill a listing or an offer onchain.
     */
    generateFulfillmentData(fulfillerAddress: string, orderHash: string, protocolAddress: string, side: OrderSide, assetContractAddress?: string, tokenId?: string): Promise<FulfillmentDataResponse>;
    /**
     * Post an order to OpenSea.
     */
    postOrder(order: ProtocolData, apiOptions: OrderAPIOptions): Promise<OrderV2>;
    /**
     * Offchain cancel an order, offer or listing, by its order hash when protected by the SignedZone.
     */
    offchainCancelOrder(protocolAddress: string, orderHash: string, chain?: Chain, offererSignature?: string): Promise<CancelOrderResponse>;
}
