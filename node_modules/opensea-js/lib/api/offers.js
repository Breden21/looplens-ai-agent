"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OffersAPI = void 0;
const apiPaths_1 = require("./apiPaths");
const utils_1 = require("../orders/utils");
/**
 * Offer-related API operations
 */
class OffersAPI {
    constructor(get, post) {
        this.get = get;
        this.post = post;
    }
    /**
     * Gets all offers for a given collection.
     */
    async getAllOffers(collectionSlug, limit, next) {
        const response = await this.get((0, apiPaths_1.getAllOffersAPIPath)(collectionSlug), {
            limit,
            next,
        });
        return response;
    }
    /**
     * Gets trait offers for a given collection.
     */
    async getTraitOffers(collectionSlug, type, value, limit, next, floatValue, intValue) {
        const response = await this.get((0, apiPaths_1.getTraitOffersPath)(collectionSlug), {
            type,
            value,
            limit,
            next,
            float_value: floatValue,
            int_value: intValue,
        });
        return response;
    }
    /**
     * Gets the best offer for a given token.
     */
    async getBestOffer(collectionSlug, tokenId) {
        const response = await this.get((0, apiPaths_1.getBestOfferAPIPath)(collectionSlug, tokenId));
        return response;
    }
    /**
     * Build a OpenSea collection offer.
     */
    async buildOffer(offererAddress, quantity, collectionSlug, offerProtectionEnabled = true, traitType, traitValue) {
        if (traitType || traitValue) {
            if (!traitType || !traitValue) {
                throw new Error("Both traitType and traitValue must be defined if one is defined.");
            }
        }
        const payload = (0, utils_1.getBuildCollectionOfferPayload)(offererAddress, quantity, collectionSlug, offerProtectionEnabled, traitType, traitValue);
        const response = await this.post((0, apiPaths_1.getBuildOfferPath)(), payload);
        return response;
    }
    /**
     * Get a list collection offers for a given slug.
     */
    async getCollectionOffers(slug) {
        return await this.get((0, apiPaths_1.getCollectionOffersPath)(slug));
    }
    /**
     * Post a collection offer to OpenSea.
     */
    async postCollectionOffer(order, slug, traitType, traitValue) {
        const payload = (0, utils_1.getPostCollectionOfferPayload)(slug, order, traitType, traitValue);
        return await this.post((0, apiPaths_1.getPostCollectionOfferPath)(), payload);
    }
}
exports.OffersAPI = OffersAPI;
//# sourceMappingURL=offers.js.map