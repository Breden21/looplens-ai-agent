import { BuildOfferResponse, ListCollectionOffersResponse, GetBestOfferResponse, GetOffersResponse, CollectionOffer } from "./types";
import { ProtocolData } from "../orders/types";
/**
 * Offer-related API operations
 */
export declare class OffersAPI {
    private get;
    private post;
    constructor(get: <T>(apiPath: string, query?: object) => Promise<T>, post: <T>(apiPath: string, body?: object, opts?: object) => Promise<T>);
    /**
     * Gets all offers for a given collection.
     */
    getAllOffers(collectionSlug: string, limit?: number, next?: string): Promise<GetOffersResponse>;
    /**
     * Gets trait offers for a given collection.
     */
    getTraitOffers(collectionSlug: string, type: string, value: string, limit?: number, next?: string, floatValue?: number, intValue?: number): Promise<GetOffersResponse>;
    /**
     * Gets the best offer for a given token.
     */
    getBestOffer(collectionSlug: string, tokenId: string | number): Promise<GetBestOfferResponse>;
    /**
     * Build a OpenSea collection offer.
     */
    buildOffer(offererAddress: string, quantity: number, collectionSlug: string, offerProtectionEnabled?: boolean, traitType?: string, traitValue?: string): Promise<BuildOfferResponse>;
    /**
     * Get a list collection offers for a given slug.
     */
    getCollectionOffers(slug: string): Promise<ListCollectionOffersResponse | null>;
    /**
     * Post a collection offer to OpenSea.
     */
    postCollectionOffer(order: ProtocolData, slug: string, traitType?: string, traitValue?: string): Promise<CollectionOffer | null>;
}
