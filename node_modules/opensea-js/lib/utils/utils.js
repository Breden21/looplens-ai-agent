"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasErrorCode = exports.getMaxOrderExpirationTimestamp = exports.estimateGas = void 0;
const constants_1 = require("../constants");
// Re-export all utilities from specialized modules
__exportStar(require("./converters"), exports);
__exportStar(require("./chain"), exports);
__exportStar(require("./fees"), exports);
__exportStar(require("./protocol"), exports);
/**
 * Estimate gas usage for a transaction.
 * @param provider The Provider
 * @param from Address sending transaction
 * @param to Destination contract address
 * @param data Data to send to contract
 * @param value Value in ETH to send with data
 */
async function estimateGas(provider, { from, to, data, value = 0n }) {
    return await provider.estimateGas({
        from,
        to,
        value: value.toString(),
        data,
    });
}
exports.estimateGas = estimateGas;
/**
 * The longest time that an order is valid for is one month from the current date
 * @returns unix timestamp
 */
const getMaxOrderExpirationTimestamp = () => {
    const maxExpirationDate = new Date();
    maxExpirationDate.setMonth(maxExpirationDate.getMonth() + constants_1.MAX_EXPIRATION_MONTHS);
    maxExpirationDate.setDate(maxExpirationDate.getDate() - 1);
    return Math.round(maxExpirationDate.getTime() / 1000);
};
exports.getMaxOrderExpirationTimestamp = getMaxOrderExpirationTimestamp;
const hasErrorCode = (error) => {
    const untypedError = error;
    return !!untypedError.code;
};
exports.hasErrorCode = hasErrorCode;
//# sourceMappingURL=utils.js.map